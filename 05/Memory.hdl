// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    // ----------------------------------
    // BEGINNING OF THOUGHTS

    // The first 16K of our Memory module is for our RAM16K
    // 16K = 2^14
    // address (input) is 15 bits long
    // So if the MSB is 0, we're trying to access the RAM16K
    /*
    Anything of the form 0b0xxx.. is for the RAM
    */


    // Screen uses 8K of memory
    // So if MSB is 1, and MSB-1 is 0, we're accessing the screen
    // The lowest screen access is 0b100000000000000 = 16384
    // The highest screen access is 0b101111111111111 = 24575

    /*
    Anything of the form 0b10xx.. is for the screen
    */

    // The keyboard is just a single 16-bit register
    /*
    Exactly 0b110000000000000 is for the keyboard
    */
    // Else, it's invalid.


    // ----------------------------------
    // BEGINNING OF IMPLEMENTATION! (RAM first)

    // If msb=0, loadRAM=load
    // Else, load was meant for some other part of memory, and we'll just access the RAM
    Mux(a=load, b=false, sel=address[14], out=loadRAM);

    // Just use loadRAM to access memory or to update it
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=outRAM);


    // ----------------------------------
    // Screen now

    Not(in=address[13], out=secondMSBNot);
    And(a=address[14], b=secondMSBNot, out=useScreen);

    Mux(a=false, b=load, sel=useScreen, out=loadScreen);

    Screen(in=in, load=loadScreen, address=address[0..12], out=outScreen);

    // ----------------------------------
    // Keyboard!

    // If we access anything above 0b11xx..
    // we're going to get the keyboard. Invalid access causes undefined behavior, so deal with it

    Keyboard(out=outKeyboard);

    // ----------------------------------
    // If the MSB is 00 or 01, we want the RAM
    // 10 -> screen
    // 11 -> keyboard (even if invalid)
    Mux4Way16(a=outRAM, b=outRAM, c=outScreen, d=outKeyboard, sel=address[13..14], out=out);

}