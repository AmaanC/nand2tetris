// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=true, sel=address, a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
    
    // If a has been selected, pass on the actual load value. Else, pass 0 (that way, the register continues to store memory)
    RegisterSel(in=in, sel=a, load=load, out=regaOut);
    RegisterSel(in=in, sel=b, load=load, out=regbOut);
    RegisterSel(in=in, sel=c, load=load, out=regcOut);
    RegisterSel(in=in, sel=d, load=load, out=regdOut);
    RegisterSel(in=in, sel=e, load=load, out=regeOut);
    RegisterSel(in=in, sel=f, load=load, out=regfOut);
    RegisterSel(in=in, sel=g, load=load, out=reggOut);
    RegisterSel(in=in, sel=h, load=load, out=reghOut);

    Mux8Way16(a=regaOut, b=regbOut, c=regcOut, d=regdOut, e=regeOut, f=regfOut, g=reggOut, h=reghOut, sel=address, out=out);
}