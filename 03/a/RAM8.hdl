// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=true, sel=address, a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
    
    // If a has been selected, pass on the actual load value. Else, pass 0
    Mux(a=false, b=load, sel=a, out=aLoad);
    Register(in=in, load=aLoad, out=regaOut);

    Mux(a=false, b=load, sel=b, out=bLoad);
    Register(in=in, load=bLoad, out=regbOut);

    Mux(a=false, b=load, sel=c, out=cLoad);
    Register(in=in, load=cLoad, out=regcOut);

    Mux(a=false, b=load, sel=d, out=dLoad);
    Register(in=in, load=dLoad, out=regdOut);

    Mux(a=false, b=load, sel=e, out=eLoad);
    Register(in=in, load=eLoad, out=regeOut);

    Mux(a=false, b=load, sel=f, out=fLoad);
    Register(in=in, load=fLoad, out=regfOut);

    Mux(a=false, b=load, sel=g, out=gLoad);
    Register(in=in, load=gLoad, out=reggOut);

    Mux(a=false, b=load, sel=h, out=hLoad);
    Register(in=in, load=hLoad, out=reghOut);

    Mux8Way16(a=regaOut, b=regbOut, c=regcOut, d=regdOut, e=regeOut, f=regfOut, g=reggOut, h=reghOut, sel=address, out=out);
}